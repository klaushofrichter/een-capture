rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if request comes from authorized domains
    function isAuthorizedDomain() {
      return request.headers.origin in [
        'http://localhost:3333',
        'http://127.0.0.1:3333', 
        'https://klaushofrichter.github.io'
      ] || request.headers.origin == null; // Allow server-side requests
    }
    
    // Helper function to check if user is properly authenticated
    function isAuthenticated() {
      return request.auth != null && 
             request.auth.token.eenUserEmail != null &&
             isAuthorizedDomain();
    }
    
    // Helper function to check if user owns the resource
    function isOwner(resourceData) {
      return request.auth.token.eenUserEmail == resourceData.eenUserEmailField ||
             request.auth.token.email == resourceData.eenUserEmailField;
    }

    // Rules for the 'documents' collection
    match /documents/{documentId} {
      // Allow authenticated users to read documents they own
      allow read, list: if isAuthenticated() && 
        (request.auth.token.email == "klaus@klaushofrichter.net" || 
         isOwner(resource.data));

      // Allow authenticated users to create documents
      allow create: if isAuthenticated() && 
        (request.auth.token.email == "klaus@klaushofrichter.net" || 
         isOwner(request.resource.data));

      // Allow authenticated users to delete their own documents
      allow delete: if isAuthenticated() && 
        (request.auth.token.email == "klaus@klaushofrichter.net" || 
         isOwner(resource.data));
    }

    // Rules for the 'captures' collection
    match /captures/{captureId} {
      // Allow authenticated users to read only their own captures
      allow read, list: if isAuthenticated() && isOwner(resource.data);

      // Allow authenticated EEN users to create captures
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data) &&
        // Validate required fields
        request.resource.data.keys().hasAll(['name', 'cameraId', 'startDate', 'eenUserEmailField']) &&
        // Validate data types and constraints
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.cameraId is string &&
        request.resource.data.cameraId.size() > 0;

      // Allow authenticated EEN users to update their own captures
      allow update: if isAuthenticated() && 
        isOwner(resource.data) &&
        // Prevent changing ownership
        request.resource.data.eenUserEmailField == resource.data.eenUserEmailField;

      // Allow authenticated EEN users to delete their own captures
      allow delete: if isAuthenticated() && isOwner(resource.data);
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
